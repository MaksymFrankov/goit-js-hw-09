{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,MAAOC,SAASC,cAAc,uBAC9BC,KAAMF,SAASC,cAAc,sBAC7BE,OAAQH,SAASC,cAAc,wBAC/BG,OAAQJ,SAASC,cAAc,WAKjC,SAASI,EAAcC,EAAUP,GAC/B,OAAO,IAAIQ,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEF,WAAUP,UAEpBU,EAAO,CAAEH,WAAUP,S,GAEpBA,E,IAZPD,EAAKM,OAAOU,iBAAiB,SAgB7B,SAAuBC,GACrBA,EAAMC,iBAQN,IANA,IAAIC,EAAeC,OAAOpB,EAAKC,MAAMoB,OAE/BC,EAAcF,OAAOpB,EAAKI,KAAKiB,OAE/BE,EAAgBH,OAAOpB,EAAKK,OAAOgB,OAEhCG,EAAI,EAAGA,EAAID,EAAeC,GAAK,EAAG,CACzCjB,EAAciB,EAAI,EAAGL,GAClBM,MAAK,SAAAC,G,IAAGlB,EAAQkB,EAARlB,SAAsBkB,EAAZP,aACjBQ,EAAA7B,GAAS8B,OAAOC,QACd,uBAAwCC,OAAftB,EAAS,QAAgBsB,OAAVC,EAAU,M,IAGrDC,OAAM,SAAAN,G,IAAGlB,EAAQkB,EAARlB,SAAsBkB,EAAZP,aAClBQ,EAAA7B,GAAS8B,OAAOK,QACd,sBAAqCH,OAAftB,EAAS,QAAgBsB,OAAVC,EAAU,M,IAGrD,IAAIA,EAAYZ,GAAgBG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n  sbmBtn: document.querySelector('button')\n};\n\nrefs.sbmBtn.addEventListener('click', onClicksbmBtn);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n};\n\nfunction onClicksbmBtn(event) {\n  event.preventDefault();\n\n  let inputedDelay = Number(refs.delay.value);\n  // console.log(inputedDelay);\n  const inputedStep = Number(refs.step.value);\n  // console.log(inputedStep);\n  const inputedAmount = Number(refs.amount.value);\n\n  for (let i = 0; i < inputedAmount; i += 1) {\n    createPromise(i + 1, inputedDelay)\n      .then(({ position, inputedDelay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delayTime}ms`\n        );\n      })\n      .catch(({ position, inputedDelay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delayTime}ms`\n        );\n      });\n    let delayTime = inputedDelay += inputedStep;\n  }\n}"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","delay","document","querySelector","step","amount","sbmBtn","$ce04d3a99e08e73b$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","inputedDelay","Number","value","inputedStep","inputedAmount","i","then","param","$parcel$interopDefault","Notify","success","concat","delayTime","catch","failure"],"version":3,"file":"03-promises.4b5ea2ac.js.map"}